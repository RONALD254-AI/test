<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Group Chat</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
            background-color: #f3e5f5;
            background-image: url(/edited.jpg);
            background-repeat: no-repeat;
            background-size: cover; /*or use contain, or specific dimensions */
            background-position: center;
        }
        .button {
            background-color: #faf7f7;
            color: #450909;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            text-decoration: none;
        }
        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 2rem;
            background-color: #431b1b;
            color: #fff;
        }
        #chat {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            border-bottom: 1px solid #ccc;
            display: flex;
            flex-direction: column;
        }
        .message {
            background: #fff;
            padding: 10px;
            border-radius: 10px;
            margin-bottom: 10px;
            max-width: 60%;
        }
        .own-message {
            background: #dcf8c6;
            align-self: flex-end;
        }
        #messageForm {
            display: flex;
            padding: 10px;
        }
        #messageInput {
            flex: 1;
            padding: 10px;
            font-size: 16px;
        }
        #messageForm button {
            padding: 10px 20px;
            font-size: 16px;
            border-radius: 5px;
            background-color: #256535;
            color: white;
            border: none;
            cursor: pointer;
        }
        .call-buttons {
            display: flex;
            justify-content: right;
            margin-top: 10px;
        }
        .call-buttons button {
            margin: 5px;
            padding: 10px;
            font-size: 16px;
            border: none;
            cursor: pointer;
            border-radius: 5px;
            background-color: red;
            color: white;
        }
        .video-container {
            display: none;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            position: relative;
        }
        .user-video {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        video {
            width: 80%;
            max-width: 600px;
            border-radius: 10px;
        }
        .control-buttons {
            display: flex;
            justify-content: right;
            margin-top: 10px;
        }
        .control-buttons button {
            margin: 5px;
            padding: 10px;
            font-size: 16px;
            border: none;
            cursor: pointer;
            border-radius: 50%;
            background-color: red;
            color: white;
            width: 50px;
            height: 50px;
        }
    </style>
</head>
<body>
    <nav>
        <div class="logo">HighRon Tech</div>
        <a href="/schedule" class="button">Leave</a>
    </nav>
    <div class="call-buttons">
        <button id="voiceCall">Voice Call</button>
        <button id="videoCall">Video Call</button>
        <button id="muteButton">Mute</button>
        <button id="endCall">End Call</button>
    </div>
    <div class="video-container" id="videoContainer"></div>
    <div id="chat"></div>
    <form id="messageForm">
        <input type="text" id="messageInput" placeholder="Type your message..." required>
        <button type="submit">Send</button>
    </form>
    
    <script src="https://cdn.socket.io/4.0.1/socket.io.min.js"></script>
    <script>
        const socket = io();

// Elements
const chat = document.getElementById("chat");
const messageForm = document.getElementById("messageForm");
const messageInput = document.getElementById("messageInput");
const videoContainer = document.getElementById("videoContainer");
const videoCallButton = document.getElementById("videoCall");
const muteButton = document.getElementById("muteButton");
const endCallButton = document.getElementById("endCall");

let localStream;
let peerConnection;
let isMuted = false;

const iceServers = {
    iceServers: [{ urls: "stun:stun.l.google.com:19302" }]
};

// Function to display messages in chat
function displayMessage(username, message) {
    const messageElement = document.createElement("div");
    messageElement.innerHTML = `<strong>${username}:</strong> ${message}`;
    chat.appendChild(messageElement);
    chat.scrollTop = chat.scrollHeight; // Auto-scroll to latest message
}

// Send message on form submission
messageForm.addEventListener("submit", (e) => {
    e.preventDefault();
    const message = messageInput.value.trim();
    if (message !== "") {
        socket.emit("chatMessage", { username: "You", message });
        messageInput.value = "";
    }
});

// Receive and display messages (Fix for duplicate issue)
socket.off("message"); // Remove existing listeners before adding a new one
socket.on("message", ({ username, message }) => {
    displayMessage(username, message);
});

// Load previous messages when connecting
socket.on("messageHistory", (messages) => {
    chat.innerHTML = ""; // Clear previous messages
    messages.forEach(({ username, message }) => {
        displayMessage(username, message);
    });
});

// Video Call Setup
videoCallButton.addEventListener("click", async () => {
    videoContainer.style.display = "flex";
    localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
    addUserVideo("You", localStream);

    socket.emit("startCall");

    peerConnection = new RTCPeerConnection(iceServers);
    localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

    peerConnection.onicecandidate = (event) => {
        if (event.candidate) socket.emit("iceCandidate", event.candidate);
    };

    peerConnection.ontrack = (event) => {
        addUserVideo("Peer", event.streams[0]);
    };

    const offer = await peerConnection.createOffer();
    await peerConnection.setLocalDescription(offer);
    socket.emit("offer", offer);
});

// Handle Incoming Calls
socket.on("offer", async (offer) => {
    if (!peerConnection) setupPeerConnection();
    await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
    const answer = await peerConnection.createAnswer();
    await peerConnection.setLocalDescription(answer);
    socket.emit("answer", answer);
});

socket.on("answer", async (answer) => {
    await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
});

socket.on("iceCandidate", async (candidate) => {
    try {
        await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
    } catch (e) {
        console.error("Error adding ICE candidate:", e);
    }
});

// Mute/Unmute functionality
muteButton.addEventListener("click", () => {
    isMuted = !isMuted;
    localStream.getAudioTracks().forEach(track => track.enabled = !isMuted);
    muteButton.textContent = isMuted ? "Unmute" : "Mute";
    socket.emit("muteCall", isMuted);
});

// Handle mute event from peer
socket.on("muteCall", (muted) => {
    const peerAudioTrack = peerConnection?.getReceivers()?.find(receiver => receiver.track.kind === "audio")?.track;
    if (peerAudioTrack) peerAudioTrack.enabled = !muted;
});

// Function to setup peer connection (for incoming calls)
function setupPeerConnection() {
    peerConnection = new RTCPeerConnection(iceServers);
    localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

    peerConnection.onicecandidate = (event) => {
        if (event.candidate) socket.emit("iceCandidate", event.candidate);
    };

    peerConnection.ontrack = (event) => {
        addUserVideo("Peer", event.streams[0]);
    };
}

// Helper function to add user video
function addUserVideo(user, stream) {
    const userVideo = document.createElement("div");
    userVideo.classList.add("user-video");
    userVideo.innerHTML = `<strong>${user}</strong>`;

    const video = document.createElement("video");
    video.autoplay = true;
    video.srcObject = stream;

    userVideo.appendChild(video);
    videoContainer.appendChild(userVideo);
}

// Function to end the call
function endCall() {
    if (localStream) {
        localStream.getTracks().forEach(track => track.stop()); // Stop media tracks
    }
    if (peerConnection) {
        peerConnection.close(); // Close the peer connection
        peerConnection = null;
    }
    videoContainer.innerHTML = ""; // Clear video container
    videoContainer.style.display = "none"; // Hide video container

    socket.emit("endCall"); // Notify the other user
}

// Event listener for the End Call button
endCallButton.addEventListener("click", endCall);

// Listen for incoming end call signal
socket.on("endCall", () => {
    endCall(); // Execute end call function when receiving the event
});
 </script>
    
</body>
</html>
